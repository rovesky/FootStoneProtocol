// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `Player.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace IceCompactId
{
}

namespace FootStone
{
    namespace GrainInterfaces
    {
        [_System.Runtime.InteropServices.ComVisible(false)]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
        [_System.Serializable]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial class PlayerNotExsit : Ice.UserException
        {
            #region Constructors

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public PlayerNotExsit()
            {
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public PlayerNotExsit(_System.Exception ex) : base(ex)
            {
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public PlayerNotExsit(_System.Runtime.Serialization.SerializationInfo info, _System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
            }

            #endregion

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public override string ice_id()
            {
                return "::FootStone::GrainInterfaces::PlayerNotExsit";
            }

            #region Object members

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public override int GetHashCode()
            {
                int h_ = 5381;
                IceInternal.HashUtil.hashAdd(ref h_, "::FootStone::GrainInterfaces::PlayerNotExsit");
                return h_;
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public override bool Equals(object other)
            {
                if(other == null)
                {
                    return false;
                }
                if(object.ReferenceEquals(this, other))
                {
                    return true;
                }
                PlayerNotExsit o = other as PlayerNotExsit;
                if(o == null)
                {
                    return false;
                }
                return true;
            }

            #endregion

            #region Comparison members

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public static bool operator==(PlayerNotExsit lhs, PlayerNotExsit rhs)
            {
                return Equals(lhs, rhs);
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public static bool operator!=(PlayerNotExsit lhs, PlayerNotExsit rhs)
            {
                return !Equals(lhs, rhs);
            }

            #endregion

            #region Marshaling support

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            protected override void iceWriteImpl(Ice.OutputStream ostr_)
            {
                ostr_.startSlice("::FootStone::GrainInterfaces::PlayerNotExsit", -1, true);
                ostr_.endSlice();
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            protected override void iceReadImpl(Ice.InputStream istr_)
            {
                istr_.startSlice();
                istr_.endSlice();
            }

            #endregion
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [_System.Serializable]
        public partial class Item : _System.ICloneable
        {
            #region Slice data members

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public string id;

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public string name;

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public int type;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public Item()
            {
                this.id = "";
                this.name = "";
                ice_initialize();
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public Item(string id, string name, int type)
            {
                this.id = id;
                this.name = name;
                this.type = type;
                ice_initialize();
            }

            #endregion

            #region ICloneable members

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public object Clone()
            {
                return MemberwiseClone();
            }

            #endregion

            #region Object members

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public override int GetHashCode()
            {
                int h_ = 5381;
                IceInternal.HashUtil.hashAdd(ref h_, "::FootStone::GrainInterfaces::Item");
                IceInternal.HashUtil.hashAdd(ref h_, id);
                IceInternal.HashUtil.hashAdd(ref h_, name);
                IceInternal.HashUtil.hashAdd(ref h_, type);
                return h_;
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public override bool Equals(object other)
            {
                if(object.ReferenceEquals(this, other))
                {
                    return true;
                }
                if(other == null)
                {
                    return false;
                }
                if(GetType() != other.GetType())
                {
                    return false;
                }
                Item o = (Item)other;
                if(this.id == null)
                {
                    if(o.id != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!this.id.Equals(o.id))
                    {
                        return false;
                    }
                }
                if(this.name == null)
                {
                    if(o.name != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!this.name.Equals(o.name))
                    {
                        return false;
                    }
                }
                if(!this.type.Equals(o.type))
                {
                    return false;
                }
                return true;
            }

            #endregion

            #region Comparison members

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public static bool operator==(Item lhs, Item rhs)
            {
                return Equals(lhs, rhs);
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public static bool operator!=(Item lhs, Item rhs)
            {
                return !Equals(lhs, rhs);
            }

            #endregion

            #region Marshaling support

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public void ice_writeMembers(Ice.OutputStream ostr)
            {
                ostr.writeString(this.id);
                ostr.writeString(this.name);
                ostr.writeInt(this.type);
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public void ice_readMembers(Ice.InputStream istr)
            {
                this.id = istr.readString();
                this.name = istr.readString();
                this.type = istr.readInt();
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public static void ice_write(Ice.OutputStream ostr, Item v)
            {
                if(v == null)
                {
                    _nullMarshalValue.ice_writeMembers(ostr);
                }
                else
                {
                    v.ice_writeMembers(ostr);
                }
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public static Item ice_read(Ice.InputStream istr)
            {
                var v = new Item();
                v.ice_readMembers(istr);
                return v;
            }

            private static readonly Item _nullMarshalValue = new Item();

            #endregion
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [_System.Serializable]
        public partial struct PlayerMaster
        {
            #region Slice data members

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public int hp;

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public int mp;

            #endregion

            partial void ice_initialize();

            #region Constructor

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public PlayerMaster(int hp, int mp)
            {
                this.hp = hp;
                this.mp = mp;
                ice_initialize();
            }

            #endregion

            #region Object members

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public override int GetHashCode()
            {
                int h_ = 5381;
                IceInternal.HashUtil.hashAdd(ref h_, "::FootStone::GrainInterfaces::PlayerMaster");
                IceInternal.HashUtil.hashAdd(ref h_, hp);
                IceInternal.HashUtil.hashAdd(ref h_, mp);
                return h_;
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public override bool Equals(object other)
            {
                if(!(other is PlayerMaster))
                {
                    return false;
                }
                PlayerMaster o = (PlayerMaster)other;
                if(!this.hp.Equals(o.hp))
                {
                    return false;
                }
                if(!this.mp.Equals(o.mp))
                {
                    return false;
                }
                return true;
            }

            #endregion

            #region Comparison members

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public static bool operator==(PlayerMaster lhs, PlayerMaster rhs)
            {
                return Equals(lhs, rhs);
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public static bool operator!=(PlayerMaster lhs, PlayerMaster rhs)
            {
                return !Equals(lhs, rhs);
            }

            #endregion

            #region Marshaling support

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public void ice_writeMembers(Ice.OutputStream ostr)
            {
                ostr.writeInt(this.hp);
                ostr.writeInt(this.mp);
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public void ice_readMembers(Ice.InputStream istr)
            {
                this.hp = istr.readInt();
                this.mp = istr.readInt();
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public static void ice_write(Ice.OutputStream ostr, PlayerMaster v)
            {
                v.ice_writeMembers(ostr);
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public static PlayerMaster ice_read(Ice.InputStream istr)
            {
                var v = new PlayerMaster();
                v.ice_readMembers(istr);
                return v;
            }

            #endregion
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        [_System.Serializable]
        public partial class PlayerInfo : _System.ICloneable
        {
            #region Slice data members

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public string id;

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public string name;

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public int serverId;

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public int level;

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public PlayerMaster playerMaster;

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public _System.Collections.Generic.List<Item> items;

            #endregion

            partial void ice_initialize();

            #region Constructors

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public PlayerInfo()
            {
                this.id = "";
                this.name = "";
                this.playerMaster = new PlayerMaster();
                ice_initialize();
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public PlayerInfo(string id, string name, int serverId, int level, PlayerMaster playerMaster, _System.Collections.Generic.List<Item> items)
            {
                this.id = id;
                this.name = name;
                this.serverId = serverId;
                this.level = level;
                this.playerMaster = playerMaster;
                this.items = items;
                ice_initialize();
            }

            #endregion

            #region ICloneable members

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public object Clone()
            {
                return MemberwiseClone();
            }

            #endregion

            #region Object members

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public override int GetHashCode()
            {
                int h_ = 5381;
                IceInternal.HashUtil.hashAdd(ref h_, "::FootStone::GrainInterfaces::PlayerInfo");
                IceInternal.HashUtil.hashAdd(ref h_, id);
                IceInternal.HashUtil.hashAdd(ref h_, name);
                IceInternal.HashUtil.hashAdd(ref h_, serverId);
                IceInternal.HashUtil.hashAdd(ref h_, level);
                IceInternal.HashUtil.hashAdd(ref h_, playerMaster);
                IceInternal.HashUtil.hashAdd(ref h_, items);
                return h_;
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public override bool Equals(object other)
            {
                if(object.ReferenceEquals(this, other))
                {
                    return true;
                }
                if(other == null)
                {
                    return false;
                }
                if(GetType() != other.GetType())
                {
                    return false;
                }
                PlayerInfo o = (PlayerInfo)other;
                if(this.id == null)
                {
                    if(o.id != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!this.id.Equals(o.id))
                    {
                        return false;
                    }
                }
                if(this.name == null)
                {
                    if(o.name != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!this.name.Equals(o.name))
                    {
                        return false;
                    }
                }
                if(!this.serverId.Equals(o.serverId))
                {
                    return false;
                }
                if(!this.level.Equals(o.level))
                {
                    return false;
                }
                if(!this.playerMaster.Equals(o.playerMaster))
                {
                    return false;
                }
                if(this.items == null)
                {
                    if(o.items != null)
                    {
                        return false;
                    }
                }
                else
                {
                    if(!IceUtilInternal.Collections.SequenceEquals(this.items, o.items))
                    {
                        return false;
                    }
                }
                return true;
            }

            #endregion

            #region Comparison members

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public static bool operator==(PlayerInfo lhs, PlayerInfo rhs)
            {
                return Equals(lhs, rhs);
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public static bool operator!=(PlayerInfo lhs, PlayerInfo rhs)
            {
                return !Equals(lhs, rhs);
            }

            #endregion

            #region Marshaling support

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public void ice_writeMembers(Ice.OutputStream ostr)
            {
                ostr.writeString(this.id);
                ostr.writeString(this.name);
                ostr.writeInt(this.serverId);
                ostr.writeInt(this.level);
                this.playerMaster.ice_writeMembers(ostr);
                ItemListHelper.write(ostr, this.items);
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public void ice_readMembers(Ice.InputStream istr)
            {
                this.id = istr.readString();
                this.name = istr.readString();
                this.serverId = istr.readInt();
                this.level = istr.readInt();
                this.playerMaster.ice_readMembers(istr);
                this.items = ItemListHelper.read(istr);
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public static void ice_write(Ice.OutputStream ostr, PlayerInfo v)
            {
                if(v == null)
                {
                    _nullMarshalValue.ice_writeMembers(ostr);
                }
                else
                {
                    v.ice_writeMembers(ostr);
                }
            }

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            public static PlayerInfo ice_read(Ice.InputStream istr)
            {
                var v = new PlayerInfo();
                v.ice_readMembers(istr);
                return v;
            }

            private static readonly PlayerInfo _nullMarshalValue = new PlayerInfo();

            #endregion
        }

        [_System.Runtime.InteropServices.ComVisible(false)]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface PlayerPush : Ice.Object, PlayerPushOperations_
        {
        }

        [_System.Runtime.InteropServices.ComVisible(false)]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
        public partial interface Player : Ice.Object, PlayerOperations_
        {
        }
    }
}

namespace FootStone
{
    namespace GrainInterfaces
    {
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
        public delegate void Callback_PlayerPush_hpChanged();

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
        public delegate void Callback_Player_GetPlayerInfo(PlayerInfo ret);

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
        public delegate void Callback_Player_SetPlayerName();
    }
}

namespace FootStone
{
    namespace GrainInterfaces
    {
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
        public interface PlayerPushPrx : Ice.ObjectPrx
        {
            void hpChanged(int hp, Ice.OptionalContext context = new Ice.OptionalContext());

            _System.Threading.Tasks.Task hpChangedAsync(int hp, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

            Ice.AsyncResult<Callback_PlayerPush_hpChanged> begin_hpChanged(int hp, Ice.OptionalContext context = new Ice.OptionalContext());

            Ice.AsyncResult begin_hpChanged(int hp, Ice.AsyncCallback callback, object cookie);

            Ice.AsyncResult begin_hpChanged(int hp, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

            void end_hpChanged(Ice.AsyncResult asyncResult);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
        public interface PlayerPrx : Ice.ObjectPrx
        {
            PlayerInfo GetPlayerInfo(Ice.OptionalContext context = new Ice.OptionalContext());

            _System.Threading.Tasks.Task<PlayerInfo> GetPlayerInfoAsync(Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

            Ice.AsyncResult<Callback_Player_GetPlayerInfo> begin_GetPlayerInfo(Ice.OptionalContext context = new Ice.OptionalContext());

            Ice.AsyncResult begin_GetPlayerInfo(Ice.AsyncCallback callback, object cookie);

            Ice.AsyncResult begin_GetPlayerInfo(Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

            PlayerInfo end_GetPlayerInfo(Ice.AsyncResult asyncResult);

            void SetPlayerName(string name, Ice.OptionalContext context = new Ice.OptionalContext());

            _System.Threading.Tasks.Task SetPlayerNameAsync(string name, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

            Ice.AsyncResult<Callback_Player_SetPlayerName> begin_SetPlayerName(string name, Ice.OptionalContext context = new Ice.OptionalContext());

            Ice.AsyncResult begin_SetPlayerName(string name, Ice.AsyncCallback callback, object cookie);

            Ice.AsyncResult begin_SetPlayerName(string name, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

            void end_SetPlayerName(Ice.AsyncResult asyncResult);
        }
    }
}

namespace FootStone
{
    namespace GrainInterfaces
    {
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
        public interface PlayerPushOperations_
        {
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            void hpChanged(int hp, Ice.Current current = null);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
        public interface PlayerOperations_
        {
            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            _System.Threading.Tasks.Task<PlayerInfo> GetPlayerInfoAsync(Ice.Current current = null);

            [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
            _System.Threading.Tasks.Task SetPlayerNameAsync(string name, Ice.Current current = null);
        }
    }
}

namespace FootStone
{
    namespace GrainInterfaces
    {
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
        public sealed class ItemListHelper
        {
            public static void write(Ice.OutputStream ostr, _System.Collections.Generic.List<Item> v)
            {
                if(v == null)
                {
                    ostr.writeSize(0);
                }
                else
                {
                    ostr.writeSize(v.Count);
                    for(int ix = 0; ix < v.Count; ++ix)
                    {
                        (v[ix] == null ? new Item() : v[ix]).ice_writeMembers(ostr);
                    }
                }
            }

            public static _System.Collections.Generic.List<Item> read(Ice.InputStream istr)
            {
                _System.Collections.Generic.List<Item> v;
                {
                    int szx = istr.readAndCheckSeqSize(6);
                    v = new _System.Collections.Generic.List<Item>(szx);
                    for(int ix = 0; ix < szx; ++ix)
                    {
                        Item val = new Item();
                        val.ice_readMembers(istr);
                        v.Add(val);
                    }
                }
                return v;
            }
        }

        [_System.Runtime.InteropServices.ComVisible(false)]
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
        [_System.Serializable]
        public sealed class PlayerPushPrxHelper : Ice.ObjectPrxHelperBase, PlayerPushPrx
        {
            public PlayerPushPrxHelper()
            {
            }

            public PlayerPushPrxHelper(_System.Runtime.Serialization.SerializationInfo info, _System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
            }

            #region Synchronous operations

            public void hpChanged(int hp, Ice.OptionalContext context = new Ice.OptionalContext())
            {
                try
                {
                    _iceI_hpChangedAsync(hp, context, null, _System.Threading.CancellationToken.None, true).Wait();
                }
                catch(_System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            #endregion

            #region Async Task operations

            public _System.Threading.Tasks.Task hpChangedAsync(int hp, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
            {
                return _iceI_hpChangedAsync(hp, context, progress, cancel, false);
            }

            private _System.Threading.Tasks.Task _iceI_hpChangedAsync(int iceP_hp, Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
            {
                var completed = new IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_hpChanged(iceP_hp, context, synchronous, completed);
                return completed.Task;
            }

            private const string _hpChanged_name = "hpChanged";

            private void _iceI_hpChanged(int iceP_hp, _System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _hpChanged_name,
                    Ice.OperationMode.Normal,
                    Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        ostr.writeInt(iceP_hp);
                    });
            }

            #endregion

            #region Asynchronous operations

            public Ice.AsyncResult<Callback_PlayerPush_hpChanged> begin_hpChanged(int hp, Ice.OptionalContext context = new Ice.OptionalContext())
            {
                return begin_hpChanged(hp, context, null, null, false);
            }

            public Ice.AsyncResult begin_hpChanged(int hp, Ice.AsyncCallback callback, object cookie)
            {
                return begin_hpChanged(hp, new Ice.OptionalContext(), callback, cookie, false);
            }

            public Ice.AsyncResult begin_hpChanged(int hp, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
            {
                return begin_hpChanged(hp, context, callback, cookie, false);
            }

            public void end_hpChanged(Ice.AsyncResult asyncResult)
            {
                var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _hpChanged_name);
                ((IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private Ice.AsyncResult<Callback_PlayerPush_hpChanged> begin_hpChanged(int iceP_hp, _System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                var completed = new IceInternal.OperationAsyncResultCompletionCallback<Callback_PlayerPush_hpChanged, object>(
                    (Callback_PlayerPush_hpChanged cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _hpChanged_name, cookie, completedCallback);
                _iceI_hpChanged(iceP_hp, context, synchronous, completed);
                return completed;
            }

            #endregion

            #region Checked and unchecked cast operations

            public static PlayerPushPrx checkedCast(Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                PlayerPushPrx r = b as PlayerPushPrx;
                if((r == null) && b.ice_isA(ice_staticId()))
                {
                    PlayerPushPrxHelper h = new PlayerPushPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static PlayerPushPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                PlayerPushPrx r = b as PlayerPushPrx;
                if((r == null) && b.ice_isA(ice_staticId(), ctx))
                {
                    PlayerPushPrxHelper h = new PlayerPushPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static PlayerPushPrx checkedCast(Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId()))
                    {
                        PlayerPushPrxHelper h = new PlayerPushPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static PlayerPushPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId(), ctx))
                    {
                        PlayerPushPrxHelper h = new PlayerPushPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static PlayerPushPrx uncheckedCast(Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                PlayerPushPrx r = b as PlayerPushPrx;
                if(r == null)
                {
                    PlayerPushPrxHelper h = new PlayerPushPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static PlayerPushPrx uncheckedCast(Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                Ice.ObjectPrx bb = b.ice_facet(f);
                PlayerPushPrxHelper h = new PlayerPushPrxHelper();
                h.iceCopyFrom(bb);
                return h;
            }

            private static readonly string[] _ids =
            {
                "::FootStone::GrainInterfaces::PlayerPush",
                "::Ice::Object"
            };

            public static string ice_staticId()
            {
                return _ids[0];
            }

            #endregion

            #region Marshaling support

            public static void write(Ice.OutputStream ostr, PlayerPushPrx v)
            {
                ostr.writeProxy(v);
            }

            public static PlayerPushPrx read(Ice.InputStream istr)
            {
                Ice.ObjectPrx proxy = istr.readProxy();
                if(proxy != null)
                {
                    PlayerPushPrxHelper result = new PlayerPushPrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }

        [_System.Runtime.InteropServices.ComVisible(false)]
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
        [_System.Serializable]
        public sealed class PlayerPrxHelper : Ice.ObjectPrxHelperBase, PlayerPrx
        {
            public PlayerPrxHelper()
            {
            }

            public PlayerPrxHelper(_System.Runtime.Serialization.SerializationInfo info, _System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
            }

            #region Synchronous operations

            public PlayerInfo GetPlayerInfo(Ice.OptionalContext context = new Ice.OptionalContext())
            {
                try
                {
                    return _iceI_GetPlayerInfoAsync(context, null, _System.Threading.CancellationToken.None, true).Result;
                }
                catch(_System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            public void SetPlayerName(string name, Ice.OptionalContext context = new Ice.OptionalContext())
            {
                try
                {
                    _iceI_SetPlayerNameAsync(name, context, null, _System.Threading.CancellationToken.None, true).Wait();
                }
                catch(_System.AggregateException ex_)
                {
                    throw ex_.InnerException;
                }
            }

            #endregion

            #region Async Task operations

            public _System.Threading.Tasks.Task<PlayerInfo> GetPlayerInfoAsync(Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
            {
                return _iceI_GetPlayerInfoAsync(context, progress, cancel, false);
            }

            private _System.Threading.Tasks.Task<PlayerInfo> _iceI_GetPlayerInfoAsync(Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_GetPlayerInfo_name);
                var completed = new IceInternal.OperationTaskCompletionCallback<PlayerInfo>(progress, cancel);
                _iceI_GetPlayerInfo(context, synchronous, completed);
                return completed.Task;
            }

            private const string _GetPlayerInfo_name = "GetPlayerInfo";

            private void _iceI_GetPlayerInfo(_System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<PlayerInfo>(completed);
                outAsync.invoke(
                    _GetPlayerInfo_name,
                    Ice.OperationMode.Idempotent,
                    Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    userException: (Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(PlayerNotExsit)
                        {
                            throw;
                        }
                        catch(Ice.UserException)
                        {
                        }
                    },
                    read: (Ice.InputStream istr) =>
                    {
                        PlayerInfo ret = null;
                        ret = PlayerInfo.ice_read(istr);
                        return ret;
                    });
            }

            public _System.Threading.Tasks.Task SetPlayerNameAsync(string name, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
            {
                return _iceI_SetPlayerNameAsync(name, context, progress, cancel, false);
            }

            private _System.Threading.Tasks.Task _iceI_SetPlayerNameAsync(string iceP_name, Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
            {
                iceCheckTwowayOnly(_SetPlayerName_name);
                var completed = new IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
                _iceI_SetPlayerName(iceP_name, context, synchronous, completed);
                return completed.Task;
            }

            private const string _SetPlayerName_name = "SetPlayerName";

            private void _iceI_SetPlayerName(string iceP_name, _System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
            {
                var outAsync = getOutgoingAsync<object>(completed);
                outAsync.invoke(
                    _SetPlayerName_name,
                    Ice.OperationMode.Normal,
                    Ice.FormatType.DefaultFormat,
                    context,
                    synchronous,
                    write: (Ice.OutputStream ostr) =>
                    {
                        ostr.writeString(iceP_name);
                    },
                    userException: (Ice.UserException ex) =>
                    {
                        try
                        {
                            throw ex;
                        }
                        catch(PlayerNotExsit)
                        {
                            throw;
                        }
                        catch(Ice.UserException)
                        {
                        }
                    });
            }

            #endregion

            #region Asynchronous operations

            public Ice.AsyncResult<Callback_Player_GetPlayerInfo> begin_GetPlayerInfo(Ice.OptionalContext context = new Ice.OptionalContext())
            {
                return begin_GetPlayerInfo(context, null, null, false);
            }

            public Ice.AsyncResult begin_GetPlayerInfo(Ice.AsyncCallback callback, object cookie)
            {
                return begin_GetPlayerInfo(new Ice.OptionalContext(), callback, cookie, false);
            }

            public Ice.AsyncResult begin_GetPlayerInfo(Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
            {
                return begin_GetPlayerInfo(context, callback, cookie, false);
            }

            public PlayerInfo end_GetPlayerInfo(Ice.AsyncResult asyncResult)
            {
                var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _GetPlayerInfo_name);
                var outgoing_ = (IceInternal.OutgoingAsyncT<PlayerInfo>)resultI_.OutgoingAsync;
                return outgoing_.getResult(resultI_.wait());
            }

            private Ice.AsyncResult<Callback_Player_GetPlayerInfo> begin_GetPlayerInfo(_System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_GetPlayerInfo_name);
                var completed = new IceInternal.OperationAsyncResultCompletionCallback<Callback_Player_GetPlayerInfo, PlayerInfo>(
                    (Callback_Player_GetPlayerInfo cb, PlayerInfo ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke(ret);
                        }
                    },
                    this, _GetPlayerInfo_name, cookie, completedCallback);
                _iceI_GetPlayerInfo(context, synchronous, completed);
                return completed;
            }

            public Ice.AsyncResult<Callback_Player_SetPlayerName> begin_SetPlayerName(string name, Ice.OptionalContext context = new Ice.OptionalContext())
            {
                return begin_SetPlayerName(name, context, null, null, false);
            }

            public Ice.AsyncResult begin_SetPlayerName(string name, Ice.AsyncCallback callback, object cookie)
            {
                return begin_SetPlayerName(name, new Ice.OptionalContext(), callback, cookie, false);
            }

            public Ice.AsyncResult begin_SetPlayerName(string name, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
            {
                return begin_SetPlayerName(name, context, callback, cookie, false);
            }

            public void end_SetPlayerName(Ice.AsyncResult asyncResult)
            {
                var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _SetPlayerName_name);
                ((IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
            }

            private Ice.AsyncResult<Callback_Player_SetPlayerName> begin_SetPlayerName(string iceP_name, _System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
            {
                iceCheckAsyncTwowayOnly(_SetPlayerName_name);
                var completed = new IceInternal.OperationAsyncResultCompletionCallback<Callback_Player_SetPlayerName, object>(
                    (Callback_Player_SetPlayerName cb, object ret) =>
                    {
                        if(cb != null)
                        {
                            cb.Invoke();
                        }
                    },
                    this, _SetPlayerName_name, cookie, completedCallback);
                _iceI_SetPlayerName(iceP_name, context, synchronous, completed);
                return completed;
            }

            #endregion

            #region Checked and unchecked cast operations

            public static PlayerPrx checkedCast(Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                PlayerPrx r = b as PlayerPrx;
                if((r == null) && b.ice_isA(ice_staticId()))
                {
                    PlayerPrxHelper h = new PlayerPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static PlayerPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                PlayerPrx r = b as PlayerPrx;
                if((r == null) && b.ice_isA(ice_staticId(), ctx))
                {
                    PlayerPrxHelper h = new PlayerPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static PlayerPrx checkedCast(Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId()))
                    {
                        PlayerPrxHelper h = new PlayerPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static PlayerPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
            {
                if(b == null)
                {
                    return null;
                }
                Ice.ObjectPrx bb = b.ice_facet(f);
                try
                {
                    if(bb.ice_isA(ice_staticId(), ctx))
                    {
                        PlayerPrxHelper h = new PlayerPrxHelper();
                        h.iceCopyFrom(bb);
                        return h;
                    }
                }
                catch(Ice.FacetNotExistException)
                {
                }
                return null;
            }

            public static PlayerPrx uncheckedCast(Ice.ObjectPrx b)
            {
                if(b == null)
                {
                    return null;
                }
                PlayerPrx r = b as PlayerPrx;
                if(r == null)
                {
                    PlayerPrxHelper h = new PlayerPrxHelper();
                    h.iceCopyFrom(b);
                    r = h;
                }
                return r;
            }

            public static PlayerPrx uncheckedCast(Ice.ObjectPrx b, string f)
            {
                if(b == null)
                {
                    return null;
                }
                Ice.ObjectPrx bb = b.ice_facet(f);
                PlayerPrxHelper h = new PlayerPrxHelper();
                h.iceCopyFrom(bb);
                return h;
            }

            private static readonly string[] _ids =
            {
                "::FootStone::GrainInterfaces::Player",
                "::Ice::Object"
            };

            public static string ice_staticId()
            {
                return _ids[0];
            }

            #endregion

            #region Marshaling support

            public static void write(Ice.OutputStream ostr, PlayerPrx v)
            {
                ostr.writeProxy(v);
            }

            public static PlayerPrx read(Ice.InputStream istr)
            {
                Ice.ObjectPrx proxy = istr.readProxy();
                if(proxy != null)
                {
                    PlayerPrxHelper result = new PlayerPrxHelper();
                    result.iceCopyFrom(proxy);
                    return result;
                }
                return null;
            }

            #endregion
        }
    }
}

namespace FootStone
{
    namespace GrainInterfaces
    {
        [_System.Runtime.InteropServices.ComVisible(false)]
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
        public abstract class PlayerPushDisp_ : Ice.ObjectImpl, PlayerPush
        {
            #region Slice operations

            public abstract void hpChanged(int hp, Ice.Current current = null);

            #endregion

            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::FootStone::GrainInterfaces::PlayerPush",
                "::Ice::Object"
            };

            public override bool ice_isA(string s, Ice.Current current = null)
            {
                return _System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
            }

            public override string[] ice_ids(Ice.Current current = null)
            {
                return _ids;
            }

            public override string ice_id(Ice.Current current = null)
            {
                return _ids[0];
            }

            public static new string ice_staticId()
            {
                return _ids[0];
            }

            #endregion

            #region Operation dispatch

            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static _System.Threading.Tasks.Task<Ice.OutputStream>
            iceD_hpChanged(PlayerPush obj, IceInternal.Incoming inS, Ice.Current current)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                int iceP_hp;
                iceP_hp = istr.readInt();
                inS.endReadParams();
                obj.hpChanged(iceP_hp, current);
                return inS.setResult(inS.writeEmptyParams());
            }

            private static readonly string[] _all =
            {
                "hpChanged",
                "ice_id",
                "ice_ids",
                "ice_isA",
                "ice_ping"
            };

            public override _System.Threading.Tasks.Task<Ice.OutputStream>
            iceDispatch(IceInternal.Incoming inS, Ice.Current current)
            {
                int pos = _System.Array.BinarySearch(_all, current.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
                if(pos < 0)
                {
                    throw new Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                switch(pos)
                {
                    case 0:
                    {
                        return iceD_hpChanged(this, inS, current);
                    }
                    case 1:
                    {
                        return Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                    }
                    case 2:
                    {
                        return Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                    }
                    case 3:
                    {
                        return Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                    }
                    case 4:
                    {
                        return Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                    }
                }

                _System.Diagnostics.Debug.Assert(false);
                throw new Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            #endregion
        }

        [_System.Runtime.InteropServices.ComVisible(false)]
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.1")]
        public abstract class PlayerDisp_ : Ice.ObjectImpl, Player
        {
            #region Slice operations

            public abstract _System.Threading.Tasks.Task<PlayerInfo> GetPlayerInfoAsync(Ice.Current current = null);

            public abstract _System.Threading.Tasks.Task SetPlayerNameAsync(string name, Ice.Current current = null);

            #endregion

            #region Slice type-related members

            private static readonly string[] _ids =
            {
                "::FootStone::GrainInterfaces::Player",
                "::Ice::Object"
            };

            public override bool ice_isA(string s, Ice.Current current = null)
            {
                return _System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
            }

            public override string[] ice_ids(Ice.Current current = null)
            {
                return _ids;
            }

            public override string ice_id(Ice.Current current = null)
            {
                return _ids[0];
            }

            public static new string ice_staticId()
            {
                return _ids[0];
            }

            #endregion

            #region Operation dispatch

            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static _System.Threading.Tasks.Task<Ice.OutputStream>
            iceD_GetPlayerInfo(Player obj, IceInternal.Incoming inS, Ice.Current current)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Idempotent, current.mode);
                inS.readEmptyParams();
                return inS.setResultTask<PlayerInfo>(obj.GetPlayerInfoAsync(current),
                    (ostr, ret) =>
                    {
                        PlayerInfo.ice_write(ostr, ret);
                    });
            }

            [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
            public static _System.Threading.Tasks.Task<Ice.OutputStream>
            iceD_SetPlayerName(Player obj, IceInternal.Incoming inS, Ice.Current current)
            {
                Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
                var istr = inS.startReadParams();
                string iceP_name;
                iceP_name = istr.readString();
                inS.endReadParams();
                return inS.setResultTask(obj.SetPlayerNameAsync(iceP_name, current));
            }

            private static readonly string[] _all =
            {
                "GetPlayerInfo",
                "SetPlayerName",
                "ice_id",
                "ice_ids",
                "ice_isA",
                "ice_ping"
            };

            public override _System.Threading.Tasks.Task<Ice.OutputStream>
            iceDispatch(IceInternal.Incoming inS, Ice.Current current)
            {
                int pos = _System.Array.BinarySearch(_all, current.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
                if(pos < 0)
                {
                    throw new Ice.OperationNotExistException(current.id, current.facet, current.operation);
                }

                switch(pos)
                {
                    case 0:
                    {
                        return iceD_GetPlayerInfo(this, inS, current);
                    }
                    case 1:
                    {
                        return iceD_SetPlayerName(this, inS, current);
                    }
                    case 2:
                    {
                        return Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                    }
                    case 3:
                    {
                        return Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                    }
                    case 4:
                    {
                        return Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                    }
                    case 5:
                    {
                        return Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                    }
                }

                _System.Diagnostics.Debug.Assert(false);
                throw new Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            #endregion
        }
    }
}
